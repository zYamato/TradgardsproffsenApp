@page "/login"
@inject Data.Services.TokenService Service
@inject TestAuthStateProvider Auth
@inject NavigationManager NaviManager
@using TradgardsproffsenApp.AuthProviders
@using System.Security.Claims
@using System.Net.Sockets;

@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Components.Authorization


<style>
    form {
        width: 100%;
    }
</style>
<div class="col-md-6 offset-md-3 mt-5">
    <div class="card">
        <h4 class="card-header">Välkommen till Fastigheter Red</h4>
        <div class="card-body">
            <img src="https://toppng.com/uploads/preview/app-icon-set-login-icon-comments-avatar-icon-11553436380yill0nchdm.png"
                 alt="ikon kunde ej laddas" height="40" width="40" />
            <EditForm Model="@model" OnSubmit="LogIn">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Username</label>
                    <InputText @bind-Value="model.UserName" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText @bind-Value="model.Password" type="password" class="form-control" />
                </div>
                <button class="btn btn-primary">
                    Logga in
                </button>
                @if (IncorrectCredentials)
                {
                    <h7 style="color: #FF0000">Felaktigt Lösen/Username, vänligen försök igen</h7>
                }
            </EditForm>
        </div>
    </div>
</div>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    ClaimsPrincipal user;
    private LoginModel model = new LoginModel();
    string token = string.Empty;
    bool IncorrectCredentials;

    protected override async Task OnInitializedAsync() // skyddar ifrån att användare skapar mer konton när hen är inloggad...
    {
        user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
            NaviManager.NavigateTo("");
    }

    async void LogIn()
    {
        token = await Service.GetTokenAsync(model.UserName, model.Password);

        if (!string.IsNullOrEmpty(token))
        {
            IncorrectCredentials = false;
            try
            {
                await Auth.Login(token);
                NaviManager.NavigateTo("", forceLoad: true);
            }
            catch (SocketException e)
            {
                Console.WriteLine(e.Message);
            }
            catch (HttpRequestException e)
            {
                Console.WriteLine(e.Message);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
            finally
            {

            }
        }
        else
        {
            IncorrectCredentials = true;
        }
        this.StateHasChanged();
    }

    private class LoginModel
    {
        [Required]
        [DataType(DataType.Text)]
        public string UserName { get; set; }
        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }
    }
}
